import React, {useContext, useState, useEffect} from 'react';
import useFetch from 'hooks/useFetch'
import {CurrentUserContext} from 'contexts/currentUser'
import BackendErrorMessages from 'components/backendErrorMessages'
import useLocalStorage from 'hooks/useLocalStorage'
import { Redirect } from 'react-router-dom';

const Settings = () => {
  const [, setToken] = useLocalStorage('token')
  const [currentUserState, dispatch] = useContext(CurrentUserContext)
  const apiUrl = '/user'
  const [{response, error}, doFetch] = useFetch(apiUrl)
  const [image, setImage] = useState('')
  const [username, setUsername] = useState('')
  const [bio, setBiography] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isLogout, setIsLogout] = useState(false)
  const handleSubmit = event => {
    event.preventDefault();
    doFetch({
      method: 'put',
      data: {
        user: {
          ...currentUserState.currentUser,
          image,
          username,
          bio,
          password
        }
      }
    })
  }
  const logout = event => {
    event.preventDefault();
    setToken('')
    dispatch({type: 'LOGOUT'})
    setIsLogout(true)
  }
  
  useEffect(() => {
    if(!currentUserState.currentUser) {
      return
    }
    setImage(currentUserState.currentUser.image || '')
    setUsername(currentUserState.currentUser.username)
    setBiography(currentUserState.currentUser.bio || '')
    setEmail(currentUserState.currentUser.email)

  }, [currentUserState.currentUser])
  useEffect(() => {
    if(!response) {
      return
    }
   dispatch({type: 'SET_AUTHORIZED', payload: response.user}) 
  }, [response, dispatch])
  if(isLogout) {
    return <Redirect to="/" />
  }
  return (
    <div className="settings-page">
      <div className="container page">
      <div className="row">
      <div className="col-md-6 offset-md-3 col-xs-12">
        <h1 className="text-xs-center">
          Your Settings
        </h1>
        {error && <BackendErrorMessages backendErrors={error.errors} />}
        <form onSubmit={handleSubmit}>
          <fieldset>
            <fieldset className="form-group">
              <input
              type="text"
              className="form-control form-control-lg"
              placeholder="Url of profile picture"
              value={image}
              onChange={e => setImage(e.target.value)}
               />
            </fieldset>
            <fieldset className="form-group">
              <input
              type="text"
              className="form-control form-control-lg"
              placeholder="Username"
              value={username}
              onChange={e => setUsername(e.target.value)}
               />
            </fieldset>
            <fieldset className="form-group">
              <textarea 
              className="form-control form-control-lg"
              rows="8"
              placeholder="Short biography"
              value={bio}
              onChange={e => setBiography(e.target.value)}
              >
              </textarea>
            </fieldset>
            <fieldset className="form-group">
              <input
              type="text"
              className="form-control form-control-lg"
              placeholder="Email"
              value={email}
              onChange={e => setEmail(e.target.value)}
               />
            </fieldset>
            <fieldset className="form-group">
              <input
              type="password"
              className="form-control form-control-lg"
              placeholder="Password"
              value={password}
              onChange={e => setPassword(e.target.value)}
               />
            </fieldset>
            <button type="submit" className="btn btn-lg btn-primary pull-xs-right">
              Update Settings
            </button>
          </fieldset>
        </form>
        <hr />
        <button onClick={logout} className="btn btn-outline-danger">
          Or click here to logout
        </button>
        </div>
        </div>
      </div>
    </div>
  )
}
export default Settings